{% extends 'base.html.twig' %}

{% block body %}
    <div class="container mt-4">
        <h1 class="mb-3">–°–ø–∏—Å–æ–∫ –æ–ø—Ä–æ—Å–æ–≤</h1>
        <a href="{{ path('template_new') }}" class="btn btn-primary mb-3">–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å</a>

        {% if templates is empty %}
            <p class="text-muted">–®–∞–±–ª–æ–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</p>
        {% else %}
            <ul class="list-group">
                {% for template in templates %}
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <a href="{{ path('template_edit', { id: template.id }) }}" class="fw-bold">
                                {{ template.title }}
                            </a>
                            <span class="badge bg-secondary">{{ template.topic }}</span>
                        </div>

                        <div class="d-flex align-items-center">
                            <span class="text-muted small me-3">–ê–≤—Ç–æ—Ä: {{ template.author.name }}</span>

                            {% if is_granted('ROLE_ADMIN') or template.author == app.user %}
                                <a href="{{ path('template_edit', { id: template.id }) }}" class="btn btn-sm btn-warning me-2">
                                    ‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                                </a>

                                <button class="btn btn-sm btn-danger delete-template" data-id="{{ template.id }}">
                                    üóë –£–¥–∞–ª–∏—Ç—å
                                </button>
                            {% endif %}
                        </div>
                    </li>
                {% endfor %}
            </ul>
        {% endif %}
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".delete-template").forEach(button => {
                button.addEventListener("click", function () {
                    if (!confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω?")) {
                        return;
                    }

                    let templateId = this.dataset.id;

                    fetch(`/templates/delete/${templateId}`, {
                        method: "POST",
                        headers: { "X-Requested-With": "XMLHttpRequest" }
                    }).then(response => response.json()).then(data => {
                        if (data.success) {
                            location.reload();
                        } else {
                            alert("–û—à–∏–±–∫–∞: " + (data.error || "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —à–∞–±–ª–æ–Ω"));
                        }
                    });
                });
            });
        });
    </script>
{% endblock %}
