{% extends 'base.html.twig' %}

{% block body %}
    <div class="container">
        <h1>{{ template.title }}</h1>
        <p>{{ template.description }}</p>

        <div class="row">
            <!-- ‚úÖ –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–ª–µ–≤–∞ -->
            <div class="col-md-7">
                <h3>–°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤</h3>
                <div id="questions-list">
                    {% for question in template.questions %}
                        <div class="question-item p-3 mb-3 border rounded">
                            <h5>{{ question.title }}</h5>
                            <p>{{ question.description }}</p>
                            <p><strong>–¢–∏–ø:</strong> {{ question.type }}</p>
                            <p><strong>–í–∞—Ä–∏–∞–Ω—Ç—ã:</strong></p>
                            <ul>
                                {% for option in question.options %}
                                    <li>
                                        {{ option.value }}
                                        {% if option.isCorrect %} ‚úÖ {% endif %}
                                    </li>
                                {% endfor %}
                            </ul>

                            <button class="btn btn-primary edit-question" data-id="{{ question.id }}">‚úè –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                            <button class="btn btn-danger delete-question" data-id="{{ question.id }}">üóë –£–¥–∞–ª–∏—Ç—å</button>
                        </div>
                    {% endfor %}
                </div>
            </div>

            <!-- ‚úÖ –§–æ—Ä–º–∞ —Å–ø—Ä–∞–≤–∞ -->
            <div class="col-md-5">
                <h3 id="form-title">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å</h3>
                <form id="question-form">
                    {{ form_start(form, { 'attr': {'id': 'question-form'} }) }}

                    <!-- –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è -->
                    {% for field in form %}
                        {% if field.vars.name != 'save' and field.vars.name != 'options' %}
                            <div class="mb-3">
                                {{ form_label(field) }}
                                {{ form_widget(field) }}
                                {% for error in form_errors(field) %}
                                    <div class="alert alert-danger">{{ error }}</div>
                                {% endfor %}
                            </div>
                        {% endif %}
                    {% endfor %}

                    <!-- –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ -->
                    <div id="options-container" style="display: none;">
                        <label>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤</label>
                        <div id="options-list"></div>
                    </div>

                    {{ form_widget(form.save, {'attr': {'class': 'btn btn-primary', 'id': 'question-save'}}) }}
                    <input type="hidden" id="question-id" name="question_id">
                    {{ form_end(form) }}
                </form>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let form = document.getElementById("question-form");
            let optionsContainer = document.getElementById("options-container");
            let optionsList = document.getElementById("options-list");
            let typeField = document.querySelector("#question_type");
            let formTitle = document.getElementById("form-title");
            let questionIdInput = document.getElementById("question-id");
            let questionSaveButton = document.getElementById("question_save");

            function updateOptionsVisibility(clear = true) {
                let selectedType = typeField.value;
                optionsContainer.style.display = (selectedType === "radio" || selectedType === "multiple_choice") ? "block" : "none";

                if (clear && (selectedType === "radio" || selectedType === "multiple_choice")) {
                    optionsList.innerHTML = "";

                    for (let i = 0; i < 4; i++) {
                        let div = document.createElement("div");
                        div.classList.add("option-field");
                        div.innerHTML = `
                <div class="d-flex">
                    <input type="text" name="options[]" class="form-control me-2" placeholder="–í–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ ${i + 1}">
                    <input type="checkbox" name="is_correct[]" value="${i}" title="–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç">
                </div>`;
                        optionsList.appendChild(div);
                    }
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–µ–∫–±–æ–∫—Å–æ–≤
                attachCorrectAnswerHandlers();
            }

            function attachCorrectAnswerHandlers() {
                let selectedType = typeField.value;

                document.querySelectorAll("input[name='is_correct[]']").forEach(checkbox => {
                    checkbox.addEventListener("change", function () {
                        if (selectedType === "radio") {
                            // –°–Ω—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —É –¥—Ä—É–≥–∏—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
                            document.querySelectorAll("input[name='is_correct[]']").forEach(otherCheckbox => {
                                if (otherCheckbox !== this) {
                                    otherCheckbox.checked = false;
                                }
                            });
                        }
                    });
                });
            }

            typeField.addEventListener("change", function () {
                updateOptionsVisibility();
            });

            // ‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            form.addEventListener("submit", function (e) {
                e.preventDefault();
                let formData = new FormData(form);
                let isEditMode = !!questionIdInput.value;
                let url = isEditMode ? `/question/edit/${questionIdInput.value}` : "{{ path('question_new', {template: template.id}) }}";

                fetch(url, {
                    method: "POST",
                    body: formData,
                    headers: { "X-Requested-With": "XMLHttpRequest" }
                }).then(response => response.json()).then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
                    }
                });
            });

            // ‚úÖ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            document.querySelectorAll(".edit-question").forEach(button => {
                button.addEventListener("click", function () {
                    let questionId = this.dataset.id;
                    fetch(`/question/get/${questionId}`, {
                        headers: { "X-Requested-With": "XMLHttpRequest" }
                    }).then(response => response.json()).then(data => {
                        document.querySelector("#question_title").value = data.title;
                        document.querySelector("#question_description").value = data.description;
                        document.querySelector("#question_type").value = data.type;
                        questionIdInput.value = data.id;
                        formTitle.innerText = "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å";
                        questionSaveButton.textContent = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è";

                        optionsList.innerHTML = "";

                        if (data.options.length > 0) {
                            optionsContainer.style.display = "block";
                            data.options.forEach((option) => {
                                let div = document.createElement("div");
                                div.classList.add("option-field");
                                div.innerHTML = `
                        <div class="d-flex">
                            <input type="text" name="options[]" class="form-control me-2" value="${option.value}">
                            <input type="hidden" name="option_ids[]" value="${option.id}">
                            <input type="checkbox" name="is_correct[]" value="${option.id}" ${option.is_correct ? 'checked' : ''} title="–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç">
                        </div>`;
                                optionsList.appendChild(div);
                            });
                        } else {
                            optionsContainer.style.display = "none";
                        }

                        // ‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫ —á–µ–∫–±–æ–∫—Å–∞–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
                        attachCorrectAnswerHandlers();
                    });
                });
            });

            // ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
            document.querySelectorAll(".delete-question").forEach(button => {
                button.addEventListener("click", function () {
                    let questionId = this.dataset.id;
                    fetch(`/question/delete/${questionId}`, {
                        method: "POST",
                        headers: { "X-Requested-With": "XMLHttpRequest" }
                    }).then(response => response.json()).then(data => {
                        if (data.success) {
                            location.reload();
                        } else {
                            alert("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏");
                        }
                    });
                });
            });

            // ‚úÖ –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
            function resetForm() {
                form.reset();
                questionIdInput.value = "";
                formTitle.innerText = "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å";
                questionSaveButton.textContent = "–î–æ–±–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å";
                updateOptionsVisibility();
            }
        });

    </script>

{% endblock %}
